# name: Java CI with Maven

# env:
#   JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64
#   JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

# jobs:
#   setup_jdk:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up JDK 17
#         uses: actions/setup-java@v3
#         with:
#           java-version: '17'
#           distribution: 'temurin'
#           cache: maven

#       - name: Create Maven settings.xml
#         run: |
#           mkdir -p $HOME/.m2
#           echo "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\" \
#             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \
#             xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 \
#             http://maven.apache.org/xsd/settings-1.0.0.xsd\"> \
#             <servers> \
#               <server> \
#                 <id>github</id> \
#                 <username>${{ github.username }}</username> \
#                 <password>${{ secrets.GITHUB_TOKEN }}</password> \
#               </server> \
#             </servers> \
#           </settings>" > $HOME/.m2/settings.xml
#           cat $HOME/.m2/settings.xml  # Debugging line to ensure the file was created

#   build:
#     runs-on: ubuntu-latest
#     needs: setup_jdk
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Build with Maven
#         run: mvn -B package --file pom.xml --settings $HOME/.m2/settings.xml

#       - name: Upload JAR file as artifact
#         uses: actions/upload-artifact@v2
#         with:
#           name: gateway-app
#           path: target/*.jar

#   spotless_check:
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run spotless check
#         run: mvn spotless:check --settings $HOME/.m2/settings.xml

#   # spotbugs:
#   #   runs-on: ubuntu-latest
#   #   needs: spotless_check
#   #   steps:
#   #     - name: Checkout repository
#   #       uses: actions/checkout@v4

#   #     - name: Run SpotBugs
#   #       run: mvn spotbugs:check --settings $HOME/.m2/settings.xml

#   test:
#     runs-on: ubuntu-latest
#     # needs to be refactored after spotbugs fix
#     needs: spotless_check
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Run tests with Maven and generate JaCoCo report
#         run: mvn test jacoco:report --settings $HOME/.m2/settings.xml

#   upload_report:
#     runs-on: ubuntu-latest
#     needs: test
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Upload JaCoCo report
#         uses: actions/upload-artifact@v2
#         with:
#           name: jacoco-report
#           path: target/site/jacoco
name: Java CI/CD with Maven

env:
  JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64
  JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.11-9/x64

on:
  workflow_dispatch:

jobs:
  setup_jdk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

  update_version:
    runs-on: ubuntu-latest
    needs: setup_jdk
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Increment version in pom.xml
        run: |
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          next_version=$(echo $current_version | awk -F'[.-]' '{print $1"."$2"."$3+1}')
          echo "Current version: $current_version"
          echo "Next version: $next_version"
          mvn versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false
          git config --global user.email ${{secrets.GIT_EMAIL}}
          git config --global user.name ${{secrets.GIT_USERNAME}}
          git add pom.xml
          git commit -m "Bump version to $next_version"
          echo "next_version=$next_version" >> $GITHUB_ENV
          git push origin HEAD:master
  build:
    runs-on: ubuntu-latest
    needs: update_version
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload JAR file as artifact
        uses: actions/upload-artifact@v2
        with:
          name: gateway-app
          path: target/*.jar

  spotless_check:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run spotless check
        run: mvn spotless:check

  spotbugs:
    runs-on: ubuntu-latest
    needs: spotless_check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run SpotBugs
        run: mvn spotbugs:check

  test:
    runs-on: ubuntu-latest
    needs: spotbugs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run tests with Maven and generate JaCoCo report
        run: mvn test jacoco:report

  upload_report:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload JaCoCo report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco

  docker_login:
    runs-on: ubuntu-latest
    needs: upload_report
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  set_docker_tag:
    runs-on: ubuntu-latest
    needs: docker_login
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Append version to Docker image tag
        run: |
          echo "Setting Docker image tag with next version: ${{ env.next_version }}"
          echo "docker_tag=${{ secrets.DOCKER_USERNAME }}/coreapi-gateway:${{ env.next_version }}" >> $GITHUB_ENV
  
  build_and_push_docker:
    runs-on: ubuntu-latest
    needs: set_docker_tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download JAR file
        uses: actions/download-artifact@v2
        with:
          name: gateway-app
          path: target
